// src/pages/AnaliseSKUPage.jsx
import { useState, useEffect, useCallback } from "react"; // âœ… Adicione useCallback
import Estatisticas from "../components/AnaliseSKU/Estatisticas";
import FiltrosAnalise from "../components/AnaliseSKU/FiltrosAnalise";
import TabelaAnalise from "../components/AnaliseSKU/TabelaAnalise";
import PaginacaoAnalise from "../components/AnaliseSKU/PaginacaoAnalise";

export default function AnaliseSKUPage() {
  const [dados, setDados] = useState([]);
  const [stats, setStats] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null); // âœ… Estado para erro

  const [filtros, setFiltros] = useState({
    q: "",
    duplicados: false,
    min: "",
    max: "",
    page: 1,
    limit: 10,
  });

  // âœ… useCallback para memorizar a funÃ§Ã£o e poder usÃ¡-la em useEffect e no botÃ£o
  const fetchDados = useCallback(async () => {
    setLoading(true);
    setError(null); // âœ… Limpa o erro anterior ao iniciar uma nova busca
    try {
      const params = new URLSearchParams();
      // âœ… SÃ³ adiciona parÃ¢metros com valor truthy e que nÃ£o sejam booleanos falsos (como duplicados=false)
      //    Se quiser enviar `duplicados=false`, remova a condiÃ§Ã£o `v &&`
      Object.entries(filtros).forEach(([k, v]) => {
        // Para campos booleanos como 'duplicados', enviamos o valor mesmo sendo false
        // Para outros campos, sÃ³ enviamos se forem truthy
        if (k === "duplicados" || (v !== null && v !== undefined && v !== "")) {
          params.append(k, v);
        }
      });

      const url = `/api/sku/analise?${params}`;
      console.log("Fetching:", url); // âœ… Log para debug

      const res = await fetch(url);

      if (!res.ok) {
        let errorMessage = `Erro na requisiÃ§Ã£o (${res.status})`;
        if (res.status === 404) {
          errorMessage = "Endpoint nÃ£o encontrado (404)";
        } else if (res.status >= 500) {
          errorMessage = `Erro no servidor (${res.status})`;
        } else if (res.status >= 400) {
          // Tenta ler a mensagem de erro do corpo da resposta
          try {
            const errorData = await res.json();
            errorMessage = errorData.error || errorMessage;
          } catch (e) {
            // Se nÃ£o conseguir parsear o JSON, usa a mensagem padrÃ£o
          }
        }
        throw new Error(errorMessage);
      }

      const json = await res.json();
      setDados(json.data || []);
      setStats(json.stats || {});
    } catch (err) {
      console.error("Erro ao carregar anÃ¡lise:", err);
      setError(err.message); // Define a mensagem de erro
    } finally {
      setLoading(false);
    }
  }, [filtros]); // âœ… DependÃªncia: recria a funÃ§Ã£o se 'filtros' mudar

  // âœ… useEffect para buscar dados quando 'fetchDados' (e por consequÃªncia 'filtros') mudar
  useEffect(() => {
    fetchDados();
  }, [fetchDados]);

  const handlePageChange = (novaPagina) => {
    setFiltros((prev) => ({ ...prev, page: novaPagina }));
  };

  return (
    // âœ… Elemento raiz Ãºnico que envolve TODO o conteÃºdo JSX
    <div className="p-6 max-w-7xl mx-auto bg-gray-50 min-h-screen dark:bg-gray-900">
      <h1 className="text-2xl font-bold mb-6 text-gray-800 dark:text-white">
        ðŸ“Š AnÃ¡lise de SKUs
      </h1>

      {/* âœ… Se houver erro, mostra a mensagem acima dos outros componentes */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <p>
            <strong>Ops!</strong> Ocorreu um erro ao carregar os dados: {error}
          </p>
          <button
            onClick={fetchDados} // âœ… Agora chama a funÃ§Ã£o definida no escopo do componente
            className="mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded"
          >
            Tentar Novamente
          </button>
        </div>
      )}

      {/* âœ… Os componentes principais sÃ£o renderizados sempre, mas podem mostrar estados de loading/vazio */}
      <Estatisticas stats={stats} />
      <FiltrosAnalise filtros={filtros} setFiltros={setFiltros} />
      <TabelaAnalise dados={dados} loading={loading} />
      <PaginacaoAnalise
        page={filtros.page}
        total_pages={stats.total_pages || 1}
        onPageChange={handlePageChange}
      />
    </div>
  );
}
